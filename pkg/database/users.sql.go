// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"
)

const deleteUser = `-- name: DeleteUser :execrows
DELETE FROM users
WHERE uuid = ?1
`

type DeleteUserParams struct {
	Uuid string `json:"uuid"`
}

// DeleteUser
//
//	DELETE FROM users
//	WHERE uuid = ?1
func (q *Queries) DeleteUser(ctx context.Context, arg DeleteUserParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteUser, arg.Uuid)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const findUserByDisplayName = `-- name: FindUserByDisplayName :one
SELECT id, created_at, updated_at, uuid, display_name, first_name, last_name, password_hash, password_salt, bio, avatar_url, totp_secret, refresh_jti
  FROM users
 WHERE display_name = ?1
`

type FindUserByDisplayNameParams struct {
	DisplayName string `json:"displayName"`
}

// FindUserByDisplayName
//
//	SELECT id, created_at, updated_at, uuid, display_name, first_name, last_name, password_hash, password_salt, bio, avatar_url, totp_secret, refresh_jti
//	  FROM users
//	 WHERE display_name = ?1
func (q *Queries) FindUserByDisplayName(ctx context.Context, arg FindUserByDisplayNameParams) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserByDisplayName, arg.DisplayName)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Uuid,
		&i.DisplayName,
		&i.FirstName,
		&i.LastName,
		&i.PasswordHash,
		&i.PasswordSalt,
		&i.Bio,
		&i.AvatarUrl,
		&i.TotpSecret,
		&i.RefreshJti,
	)
	return i, err
}

const findUserById = `-- name: FindUserById :one
SELECT id, created_at, updated_at, uuid, display_name, first_name, last_name, password_hash, password_salt, bio, avatar_url, totp_secret, refresh_jti
  FROM users
 WHERE id = ?1
`

type FindUserByIdParams struct {
	ID int64 `json:"id"`
}

// FindUserById
//
//	SELECT id, created_at, updated_at, uuid, display_name, first_name, last_name, password_hash, password_salt, bio, avatar_url, totp_secret, refresh_jti
//	  FROM users
//	 WHERE id = ?1
func (q *Queries) FindUserById(ctx context.Context, arg FindUserByIdParams) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserById, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Uuid,
		&i.DisplayName,
		&i.FirstName,
		&i.LastName,
		&i.PasswordHash,
		&i.PasswordSalt,
		&i.Bio,
		&i.AvatarUrl,
		&i.TotpSecret,
		&i.RefreshJti,
	)
	return i, err
}

const findUserByUuid = `-- name: FindUserByUuid :one
SELECT id, created_at, updated_at, uuid, display_name, first_name, last_name, password_hash, password_salt, bio, avatar_url, totp_secret, refresh_jti
  FROM users
 WHERE uuid = ?1
`

type FindUserByUuidParams struct {
	Uuid string `json:"uuid"`
}

// FindUserByUuid
//
//	SELECT id, created_at, updated_at, uuid, display_name, first_name, last_name, password_hash, password_salt, bio, avatar_url, totp_secret, refresh_jti
//	  FROM users
//	 WHERE uuid = ?1
func (q *Queries) FindUserByUuid(ctx context.Context, arg FindUserByUuidParams) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserByUuid, arg.Uuid)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Uuid,
		&i.DisplayName,
		&i.FirstName,
		&i.LastName,
		&i.PasswordHash,
		&i.PasswordSalt,
		&i.Bio,
		&i.AvatarUrl,
		&i.TotpSecret,
		&i.RefreshJti,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :execrows
INSERT INTO users
(
	uuid,
	first_name,
	last_name,
	display_name,
	password_hash,
	password_salt,
	avatar_url,
	totp_secret,
	refresh_jti
)
VALUES
(
	?1,
	?2,
	?3,
	?4,
	?5,
	?6,
	?7,
	?8,
	?9
)
`

type InsertUserParams struct {
	Uuid         string      `json:"uuid"`
	FirstName    string      `json:"firstName"`
	LastName     string      `json:"lastName"`
	DisplayName  string      `json:"displayName"`
	PasswordHash string      `json:"passwordHash"`
	PasswordSalt string      `json:"passwordSalt"`
	AvatarUrl    interface{} `json:"avatarUrl"`
	TotpSecret   interface{} `json:"totpSecret"`
	RefreshJti   interface{} `json:"refreshJti"`
}

// InsertUser
//
//	INSERT INTO users
//	(
//		uuid,
//		first_name,
//		last_name,
//		display_name,
//		password_hash,
//		password_salt,
//		avatar_url,
//		totp_secret,
//		refresh_jti
//	)
//	VALUES
//	(
//		?1,
//		?2,
//		?3,
//		?4,
//		?5,
//		?6,
//		?7,
//		?8,
//		?9
//	)
func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, insertUser,
		arg.Uuid,
		arg.FirstName,
		arg.LastName,
		arg.DisplayName,
		arg.PasswordHash,
		arg.PasswordSalt,
		arg.AvatarUrl,
		arg.TotpSecret,
		arg.RefreshJti,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const updateUser = `-- name: UpdateUser :execrows
UPDATE users
SET    first_name = ?1,
        last_name = ?2,
     display_name = ?3,
    password_hash = ?4,
    password_salt = ?5,
       avatar_url = ?6,
      totp_secret = ?7,
      refresh_jti = ?8
WHERE        uuid = ?9
`

type UpdateUserParams struct {
	FirstName    string      `json:"firstName"`
	LastName     string      `json:"lastName"`
	DisplayName  string      `json:"displayName"`
	PasswordHash string      `json:"passwordHash"`
	PasswordSalt string      `json:"passwordSalt"`
	AvatarUrl    interface{} `json:"avatarUrl"`
	TotpSecret   interface{} `json:"totpSecret"`
	RefreshJti   interface{} `json:"refreshJti"`
	Uuid         string      `json:"uuid"`
}

// UpdateUser
//
//	UPDATE users
//	SET    first_name = ?1,
//	        last_name = ?2,
//	     display_name = ?3,
//	    password_hash = ?4,
//	    password_salt = ?5,
//	       avatar_url = ?6,
//	      totp_secret = ?7,
//	      refresh_jti = ?8
//	WHERE        uuid = ?9
func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateUser,
		arg.FirstName,
		arg.LastName,
		arg.DisplayName,
		arg.PasswordHash,
		arg.PasswordSalt,
		arg.AvatarUrl,
		arg.TotpSecret,
		arg.RefreshJti,
		arg.Uuid,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
